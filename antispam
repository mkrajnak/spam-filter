#!/bin/python
# Antispam filter - project for BIS course at FIT BUT
# Author: Martin Krajnak
import sys
import os
# eml parser and deps
from eml_parser import eml_parser
import json # TODO delete, for debugging only
import datetime
import email.message
# classification libraries
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

def help():
    print("Usage: antispam [<file1> <file2> ...]")


def check_args(args):
    if len(args) == 0:
        help()


def spam_print(email, reason):
    print(email,"- SPAM -", reason)


def ok_print(email):
    print(email,"- OK")


def check_spam(email, content):
    if 'sex' in content:
        spam_print(email, 'Contains: sex')
    else:
        ok_print(email)


def read_from_empty_line(email):
    try:
        with open(email,'r') as mail:
            content = mail.readlines()
    except:
        with open(email,'r', encoding='latin-1') as mail:
            content = mail.readlines()
    index = 0
    for i,line in enumerate(content):
        if line == '\n':
            index = i + 1
            break
    content = content[i:]
    return ''.join(content)


def debug_print(email, msg):
    print('--------'+email+'--------')
    print(msg)
    print('--------'+email+'--------')


def get_message(email):
    '''
    Open mail as a binary file pass it to eml_parser to get content
    if body of received object is empty, try to reopen and to make sure we obtain
    message. Of erorr ocurrs, try to read best effot with latin-1 encoding
    @return message
    '''
    with open(email, 'rb') as mail:
        content = mail.read()
        parsed_content = eml_parser.decode_email_b(content, include_raw_body=True)

    if 'body' in parsed_content.keys() and parsed_content['body'] != []:
        if len(parsed_content['body']) > 1:
            message = ''
            for i, part in enumerate(parsed_content['body']):
                message += parsed_content['body'][i]['content']
            return ''.join(message)
        else:
            return parsed_content['body'][0]['content']
    else:
        return read_from_empty_line(email)

'''
create a dict containing message and classification spam -> True, ham -> False
'''
def classify_message(full_path):
    msg = get_message(full_path)
    spam = True if 'spam' in full_path else False
    return { 'msg': msg, 'spam' : spam }


def walk_through_files(dir_name):
    messages = []
    for root, dirs, files in os.walk(dir_name, topdown=False):
        for name in files:
            messages.append(classify_message(os.path.join(root, name)))
    return messages


def learn_on_dataset(messages):
    #TODO shufffle values
    count_vectorizer = CountVectorizer()
    counts = count_vectorizer.fit_transform([x['msg'] for x in messages])
    classifier = MultinomialNB()
    targets = [x['spam'] for x in messages]
    classifier.fit(counts, targets)
    import ipdb; ipdb.set_trace()


'''
Main
'''
emails = sys.argv[1:]
check_args(emails)

for email in emails:
    try:
        if os.path.isdir(email):
            messages = walk_through_files(email)
            learn_on_dataset(messages)
        else:
            msg = get_message(email)
            debug_print(email, msg)
    except Exception as e:
        print(email,"- FAIL - failed to open email file")
        continue
