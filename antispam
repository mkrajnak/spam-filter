#!/bin/python3
# Antispam filter - project for BIS course at FIT BUT
# Author: Martin Krajnak
import sys
import os
# eml parser and deps
from random import shuffle
from eml_parser import eml_parser
# classification libraries
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.externals import joblib
from sklearn.pipeline import Pipeline


def help():
    print("Usage: antispam [<file1> <file2> ...]")
    exit(0)

def check_args(args):
    if len(args) == 0:
        help()


def spam_print(email, reason=None):
    if reason:
        print(email,"- SPAM -", reason)
    else:
        print(email,"- SPAM")


def ok_print(email):
    print(email,"- OK")


def read_from_empty_line(email):
    try:
        with open(email,'r') as mail:
            content = mail.readlines()
    except:
        with open(email,'r', encoding='latin-1') as mail:
            content = mail.readlines()
    index = 0
    for i,line in enumerate(content):
        if line == '\n':
            index = i + 1
            break
    content = content[i:]
    return ''.join(content)


def debug_print(email, msg):
    print('--------'+email+'--------')
    print(msg)
    print('--------'+email+'--------')



def get_header(email):
    with open(email, 'rb') as mail:
        content = mail.read()
        mail = eml_parser.decode_email_b(content)
        if 'header' in mail.keys() and 'header' in mail['header'].keys():
            return mail['header']['header']
        else:
            return False


def get_message(email):
    '''
    Open mail as a binary file pass it to eml_parser to get content
    if body of received object is empty, try to reopen and to make sure we obtain
    message. Of erorr ocurrs, try to read best effot with latin-1 encoding
    @return message
    '''
    with open(email, 'rb') as mail:
        content = mail.read()
        parsed_content = eml_parser.decode_email_b(content, include_raw_body=True)

    if 'body' in parsed_content.keys() and parsed_content['body'] != []:
        if len(parsed_content['body']) > 1:
            message = ''
            for i, part in enumerate(parsed_content['body']):
                message += parsed_content['body'][i]['content']
            return ''.join(message)
        else:
            return parsed_content['body'][0]['content']
    else:
        return read_from_empty_line(email)


'''
create a dict containing message and classification spam -> True, ham -> False
'''
def classify_message(full_path):
    msg = get_message(full_path)
    spam = True if 'spam' in full_path else False
    return { 'msg': msg, 'spam' : spam }


def walk_through_files(dir_name):
    messages = []
    for root, dirs, files in os.walk(dir_name, topdown=False):
        for name in files:
            try:
                messages.append(classify_message(os.path.join(root, name)))
            except:
                continue
    return messages


def learn_on_dataset(messages):
    shuffle(messages)
    msg = [x['msg'] for x in messages]
    classification = [x['spam'] for x in messages]
    pipeline = Pipeline([('vectorizer', CountVectorizer()),
                         ('classifier', MultinomialNB())])
    return pipeline.fit(msg, classification)


def save_classifier(classifier):
    joblib.dump(classifier, 'clasifier.pkl')


def load_classifier():
    return joblib.load('clasifier.pkl')


def verify_mail(pipeline, msg):
    predict = pipeline.predict([msg])
    return predict[0]


# F used for dataset testing
def pipeline_test(pipeline, folder):
    msgs_to_validate = walk_through_files(folder)
    msgs = [x['msg'] for x in msgs_to_validate]
    predict = pipeline.predict(msgs)
    good = 0
    for i, message in enumerate(msgs_to_validate):
        if message['spam'] == predict[i]:
            good += 1
    percentage = good/len(msgs_to_validate)*100
    print('Sucess rate(%): '+str(percentage))


'''
Function responsible for learning
'''
def learn(path):
    messages = walk_through_files(path)
    pipeline = learn_on_dataset(messages)
    save_classifier(pipeline)
    exit(0)


'''
Main
'''
emails = sys.argv[1:]
check_args(emails)
# if os.path.isdir(emails[0]):
#       learn(emails[0])
#       #pipeline = load_classifier()
#       #pipeline_test(pipeline, emails[0])
#       exit(0)
try:
    pipeline = load_classifier()
except:
    print(email,"- FAIL - clasifier not found")

for email in emails:
    try:
        msg = get_message(email)
        # debug_print(email, msg)
        if verify_mail(pipeline, msg):
            spam_print(email)
        else:
            ok_print(email)

    except Exception as e:
        print(email,"- FAIL - failed to open email file")
        continue
